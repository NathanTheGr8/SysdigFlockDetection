# sysDig Test Cases

# Test Case 1
# A grabs a lock
# B opens same file, tries to grab a lock
# Contention
# 0 = succesfull, 1 or more = number of contentions
test1_result=1
test1(){
	exec 3>foo.bar
	flock -x 3
	exec 4>foo.bar
	flock -x 4
}

# Test Case 2
# A grabs a lock
# forcks A1
# A1 unlocks the lock
# B opens file, grabs lock
# succeeds
# 0 = succesfull, 1 or more = number of contentions
test2_result=0
test2(){
	exec 3>foo.bar
	exec 4>foo.bar
	flock -x 3
	(
		flock -u 3
	)
	flock -x 4
	
}

# Test Case 3
# A opens a file on FD 3
# A uses fudp() to make FD4 a copy
# A grabs an exculsive lock on FD 3
# A grabs an exclusive lock on FD 4
# Succeeds
# 0 = succesfull, 1 or more = number of contentions
test3_result=0
test3(){
	exec 3>foo.bar
	exec 4>&3
	flock -x 3
	flock -x 4
}

# Test Case 4
# A opens a file on FD 3
# A opens a file on FD 4
# A grabs an exculsive lock on FD 3
# A grabs an exclusive lock on FD 4
# Fails
# 0 = succesfull, 1 or more = number of contentions
test4_result=1
test4(){
	exec 3>foo.bar
	exec 4>foo.bar
	flock -x 3
	flock -x 4
}

# Test Case 5
# A opens a file on FD 3
# A grabs an exculsive lock on FD 3
# A closes
# B opens same file
# B grabs lock
# Succeeds
# 0 = succesfull, 1 or more = number of contentions
test5_result=0
test5(){
	exec 3>foo.bar
	flock -x 3
	exec 3>&-
	exec 4>foo.bar
	flock -x 4
}

# Test Case 6
# A opens a file on FD 3
# A opens a file on FD 4
# A grabs an exculsive lock on FD 3
# A grabs an exclusive lock on FD 4
# Fails
# 0 = succesfull, 1 or more = number of contentions
test6_result=1
test6(){
	exec 3>foo.bar
	flock -x 3
	sleep 10 &
	exec 3>&-
	exec 4>foo.bar
	flock -x 4
}

genOne() {
	local tempDir sysdig_pid desired_result_varname desired_result outFile
	outFile=$1; shift
	desired_result_varname="${1}_result"
	desired_result=${!desired_result_varname}
	tempDir=$(mktemp -d -t sysdig.XXXXXX)
	sysdig -j "proc.pid=$BASHPID or proc.apid=$BASHPID or evt.type=clone or evt.type=fork or evt.type=close or evt.type=dup or evt.type=flock or evt.type=procexit" -p '%evt.num %evt.time %evt.cpu %proc.name %evt.dir %evt.type %proc.ppid %proc.pid'>"$tempDir/out.json" & sysdig_pid=$!
	while [ ! -s "$tempDir/out.json" ]; do sleep 0.5; done
	(
		cd "$tempDir" || exit
		"$@" & testpid=$!
		sleep 5
		kill "$testpid"
	)
	kill "$sysdig_pid"
	wait
	cp "$tempDir/out.json" "$outFile"
}

runOne() {
	local inFile=$1; shift
	java -jar target/deadLockDetection-0.0.1-SNAPSHOT.jar "$inFile" "$@"
}

gen() {
	outDir=$1; shift
	mkdir -p "$outDir" || exit
	for arg; do
		genOne "$outDir/$arg.json" "$arg"
	done
}

runAll() {
	local dir=$1; shift
	for f in "$dir"/*; do
		runOne "$f" "$@"
	done
}

mkdir -p jsonFiles
if [[ $UID = 0 ]] && type -P sysdig >/dev/null 2>/dev/null; then
	gen jsonFiles test{1..6}
fi

runAll jsonFiles
